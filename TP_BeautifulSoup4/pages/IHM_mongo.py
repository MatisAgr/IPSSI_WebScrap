import streamlit as st
import mongo_connect as db_connector # Assurez-vous que mongo_connect.py est accessible
import re

st.set_page_config(layout="wide")

# --- Titre sp√©cifique √† la page ---
st.title("üîé Recherche d'Articles dans la Base de Donn√©es")
st.write("Filtrez et explorez les articles pr√©c√©demment scrap√©s et stock√©s dans MongoDB.")

# --- Connexion √† MongoDB ---
@st.cache_resource # Cache la ressource de connexion
def get_db_collection():
    """Tente de se connecter √† MongoDB et retourne l'objet collection."""
    # Chemin relatif pour remonter d'un niveau si n√©cessaire, mais Python devrait g√©rer l'import direct
    collection = db_connector.connect_to_mongo()
    if collection is None:
        st.error("‚ùå √âchec de la connexion √† MongoDB. V√©rifiez que le serveur est lanc√© et accessible.")
    return collection

articles_collection = get_db_collection()

# --- Fonction pour construire la requ√™te MongoDB ---
def build_mongo_query(start_date, end_date, author, category_or_tag, title_substring): # Renomm√© pour clart√©
    """Construit le dictionnaire de requ√™te MongoDB bas√© sur les filtres."""
    query = {}
    date_query = {}
    if start_date:
        date_query["$gte"] = start_date.strftime('%Y-%m-%d')
    if end_date:
        date_query["$lte"] = end_date.strftime('%Y-%m-%d')
    if date_query:
        query["date_iso"] = date_query
    if author:
        query["author"] = {"$regex": re.escape(author), "$options": "i"}
    # Modifier pour chercher dans le tableau 'tags'
    if category_or_tag:
        # Recherche une correspondance insensible √† la casse dans n'importe quel √©l√©ment du tableau 'tags'
        query["tags"] = {"$regex": re.escape(category_or_tag), "$options": "i"}
    if title_substring:
        query["title"] = {"$regex": re.escape(title_substring), "$options": "i"}
    return query

# --- Interface de Filtrage dans la Sidebar ---
st.sidebar.header("üîç Filtres de Recherche")
title_input = st.sidebar.text_input("Titre", key="search_title")
author_input = st.sidebar.text_input("Auteur", key="search_author")
# Renommer l'input pour refl√©ter qu'on cherche un tag/cat√©gorie
category_input = st.sidebar.text_input("Tag ou Cat√©gorie", key="search_category")
start_date_input = st.sidebar.date_input("Date de d√©but", value=None, key="search_start_date")
end_date_input = st.sidebar.date_input("Date de fin", value=None, key="search_end_date")

# --- Affichage des Articles ---
if articles_collection is not None:
    # Passer category_input √† la fonction de requ√™te
    query = build_mongo_query(start_date_input, end_date_input, author_input, category_input, title_input)
    st.subheader(f"R√©sultats ({'Filtres actifs' if query else 'Tous les articles'})")

    try:
        filtered_articles = list(articles_collection.find(query).sort("date_iso", -1))
        if not filtered_articles:
            st.warning("Aucun article ne correspond √† vos crit√®res.")
        else:
            st.info(f"{len(filtered_articles)} article(s) trouv√©(s).")
            num_columns = 2
            cols = st.columns(num_columns)
            for i, article in enumerate(filtered_articles):
                col_index = i % num_columns
                with cols[col_index]:
                    with st.container(border=True):
                        if article.get("title") and article.get("url"):
                            st.subheader(f"[{article['title']}]({article['url']})")
                        elif article.get("title"):
                            st.subheader(article['title'])
                        if article.get("thumbnail"):
                            st.image(article["thumbnail"], use_column_width=True)
                        meta_info = []
                        if article.get("author"): meta_info.append(f"üë§ {article['author']}")
                        if article.get("date_iso"): meta_info.append(f"üìÖ {article['date_iso']}")
                        elif article.get("date_display"): meta_info.append(f"üìÖ {article['date_display']}")
                        # Remplacer la ligne subcategory par la gestion des tags
                        if article.get("tags"): # V√©rifie si la cl√© 'tags' existe et si la liste n'est pas vide
                            tags_str = ", ".join(article["tags"]) # Joint les tags en une seule cha√Æne
                            meta_info.append(f"üè∑Ô∏è Tags: {tags_str}") # Ajoute la cha√Æne format√©e
                        if meta_info: st.caption(" | ".join(meta_info))
                        if article.get("summary"):
                            with st.expander("R√©sum√©"): st.write(article["summary"])
                        if article.get("url"): st.link_button("Lire l'article ‚ÜóÔ∏è", article["url"])
                        if article.get("content_images"):
                             with st.expander(f"{len(article['content_images'])} image(s)"):
                                 for img_data in article["content_images"]:
                                     st.image(img_data.get("url"), caption=img_data.get("caption_or_alt", ""), use_column_width=True)
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des articles : {e}")
else:
    st.info("Connexion √† MongoDB en attente ou √©chou√©e.")

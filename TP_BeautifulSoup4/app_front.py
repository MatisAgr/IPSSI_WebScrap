import streamlit as st
import subprocess # pour ex√©cuter un script Python
import sys
import os # pour aller √† un fichier 

st.set_page_config(
    layout="wide",
    page_title="BDM Scraper & Explorer",
    page_icon="üì∞"
)

st.sidebar.success("S√©lectionnez une page ci-dessus.")

st.write("# Bienvenue sur l'outil BDM Scraper ! ü§ñ")
st.divider()

col1, col2, col3 = st.columns(3)

# redirection vers ./pages/IHM_mongo.py
with col1:
    with st.container(border=True):
        st.subheader("üìä Explorer les Articles")
        st.write("Recherchez, filtrez et visualisez les articles stock√©s dans la BDD MongoDB.")
        st.page_link("pages/IHM_mongo.py", label="Acc√©der √† l'Explorateur", icon="üîé", use_container_width=True)


# redirection vers ./pages/Scrap_article.py
with col2:
    with st.container(border=True):
        st.subheader("‚öôÔ∏è Scraper un Article Sp√©cifique")
        st.write("Scrapez les d√©tails complets d'un seul article en fournissant son URL.")
        st.page_link("pages/Scrap_article.py", label="Scraper un Article", icon="üéØ", use_container_width=True)


# redirection vers ./pages/Scrap_category.py
with col3:
    with st.container(border=True):
        st.subheader("üóÇÔ∏è Scraper par Cat√©gorie")
        st.write("Scrapez tous les articles list√©s sur une page de cat√©gorie sp√©cifique.")
        st.page_link("pages/Scrap_category.py", label="Scraper une Cat√©gorie", icon="üìö", use_container_width=True)


st.divider()

# lancer ./main.py
st.subheader("üöÄ Lancer un Scraping Complet")
st.write("D√©marrez un nouveau processus de scraping complet pour r√©cup√©rer les derniers articles de la page d'accueil du Blog du Mod√©rateur et les ins√©rer dans la base de donn√©es. La sortie de la console s'affichera ci-dessous.")

console_output_placeholder = st.empty()
console_output_placeholder.code("La sortie du script appara√Ætra ici...", language=None)

if st.button("Lancer le Scraping Complet", use_container_width=True, type="primary"):
    console_output = ""
    console_output_placeholder.code("Lancement du scraping...", language=None)
    try:
        # D√©termine le chemin vers le script main.py
        script_path = os.path.join(os.path.dirname(__file__), "main.py")
        # Utilise l'interpr√©teur Python actuel pour ex√©cuter le script
        process = subprocess.Popen(
            [sys.executable, script_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT, # Redirige stderr vers stdout
            text=True,
            # --- Modification ici ---
            encoding='utf-8',
            errors='replace', # Remplace les caract√®res invalides par '?'
            # -----------------------
            bufsize=1 # Line-buffered
        )

        # Lit la sortie ligne par ligne et l'affiche en temps r√©el
        for line in iter(process.stdout.readline, ''):
            console_output += line
            console_output_placeholder.code(console_output, language=None)
            # Optionnel: petit d√©lai pour le rafra√Æchissement Streamlit
            # time.sleep(0.01)

        process.stdout.close()
        return_code = process.wait()

        if return_code == 0:
            console_output += "\n--- Scraping termin√© avec succ√®s ---"
            st.success("Scraping complet termin√© avec succ√®s !")
        else:
            console_output += f"\n--- Erreur lors du scraping (code de sortie: {return_code}) ---"
            st.error(f"Le scraping s'est termin√© avec une erreur (code: {return_code}). V√©rifiez la sortie ci-dessus.")
        console_output_placeholder.code(console_output, language=None)

    except FileNotFoundError:
        error_msg = f"Erreur: Le script '{script_path}' est introuvable."
        console_output_placeholder.code(error_msg, language=None)
        st.error(error_msg)
    except Exception as e:
        error_msg = f"Une erreur inattendue est survenue : {e}"
        # Afficher l'erreur dans la console simul√©e aussi
        if console_output: # S'il y a d√©j√† eu de la sortie
                console_output += f"\n{error_msg}"
        else: # Si l'erreur survient avant toute sortie
                console_output = error_msg
        console_output_placeholder.code(console_output, language=None)
        st.error(error_msg)
